<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>John Charlton</title><link href="https://coolmule0.github.io/" rel="alternate"></link><link href="https://coolmule0.github.io/feeds/all.atom.xml" rel="self"></link><id>https://coolmule0.github.io/</id><updated>2020-10-07T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Making the Most of Jupyter Notebooks</title><link href="https://coolmule0.github.io/Jupyter%20Notebooks.html" rel="alternate"></link><published>2020-10-07T00:00:00+00:00</published><updated>2020-10-07T00:00:00+00:00</updated><author><name>John Charlton</name></author><id>tag:coolmule0.github.io,2020-10-07:/Jupyter Notebooks.html</id><summary type="html">&lt;p&gt;Using Jupyter Notebooks with Extensions&lt;/p&gt;</summary><content type="html">&lt;p&gt;A brief talk on using Jupyter Notebooks with a variety of useful extentions. Given during the &lt;a href="https://rse.shef.ac.uk/events/lunchbytes-2020-10-07.html"&gt;Lunchbytes&lt;/a&gt; talk in October 2020, hosted by the RSE team at Sheffield.&lt;/p&gt;
&lt;p&gt;View the &lt;a href="https://github.com/coolmule0/Making-the-most-of-jupyter-notebooks"&gt;Github Repository&lt;/a&gt;,
the &lt;a href="https://mybinder.org/v2/gh/coolmule0/Making-the-most-of-jupyter-notebooks/master"&gt;live notebook&lt;/a&gt; 
or the &lt;a href="https://coolmule0.github.io/static/talks/JupyterNotebooks/Making_the_most_out_of_Jupyter_Notebooks.html"&gt;static html slides&lt;/a&gt;&lt;/p&gt;</content><category term="Talks"></category></entry><entry><title>Simulating Crowds and Autonomous Vehicles</title><link href="https://coolmule0.github.io/Crowds%20and%20Vehicles.html" rel="alternate"></link><published>2019-08-01T00:00:00+00:00</published><updated>2019-08-01T00:00:00+00:00</updated><author><name>John Charlton</name></author><id>tag:coolmule0.github.io,2019-08-01:/Crowds and Vehicles.html</id><summary type="html">&lt;p&gt;What might it look like if vehicles used the same open spaces as pedestrians?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Self driving vehicles are gaining greater relevance, and there are many problems that need tackling before they can be more commonly used. One of the best ways to understand problems is to be able to visualise it. This paper presents a way of seeing on-screen and in VR the effects of people and autonomous pod-like vehicles within the same space. &lt;/p&gt;
&lt;p&gt;The image below shows a snapshot of the visualisation. The pod is that from Transport Systems Catapult in Milton Keynes.&lt;/p&gt;
&lt;p&gt;&lt;img src='/static/images/4-way-inset.png' style='width: 600px;' alt='head-level view of people and autonomous pod within the Unreal Engine'&gt;&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Fast Simulation of Crowd Collision Avoidance</title><link href="https://coolmule0.github.io/Simulating%20ORCA%20People%20Crowds.html" rel="alternate"></link><published>2019-06-01T00:00:00+00:00</published><updated>2019-06-01T00:00:00+00:00</updated><author><name>John Charlton</name></author><id>tag:coolmule0.github.io,2019-06-01:/Simulating ORCA People Crowds.html</id><summary type="html">&lt;p&gt;Visually simulating numerous people with steering&lt;/p&gt;</summary><content type="html">&lt;p&gt;Performing calculations on the GPU means that the results can be easily and speedily visualised, since there is no need for CPU-&amp;gt;GPU data transfer for visualising, it is already present on the device. By using fast and efficient linear program solving on the GPU it is possible to simulate many thousands of people using more complex methods than would be possible for CPU-based methods. &lt;/p&gt;
&lt;p&gt;This paper demonstrates the performance of using the ORCA steering algorithm with many thousands of people in real-time.&lt;/p&gt;
&lt;p&gt;The image below shows 10,000 people, separated into 8 colored groups steering within an open space. The insert image in the bollow right shows a head-level view, including the ability to visualise people of different sizes, textures, and movement speed.&lt;/p&gt;
&lt;p&gt;&lt;img src='/static/images/regular8way.png' style='width: 600px;' alt='10,000 people in the Unreal Engine'&gt;&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Two-Dimensional Batch Linear Programming on the GPU</title><link href="https://coolmule0.github.io/Batch%20Linear%20Programming.html" rel="alternate"></link><published>2019-04-01T00:00:00+00:00</published><updated>2019-04-01T00:00:00+00:00</updated><author><name>John Charlton</name></author><id>tag:coolmule0.github.io,2019-04-01:/Batch Linear Programming.html</id><summary type="html">&lt;p&gt;An efficient algorithm for solving multiple linear programs on the GPU.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Journal of Parallel and Distributed Computing
April 2019 (published) &lt;a href="https://doi.org/10.1016/j.jpdc.2019.01.001"&gt;https://doi.org/10.1016/j.jpdc.2019.01.001&lt;/a&gt;
&lt;a href="manuscripts/Two_Dimensional_Batch_Linear_Programming_Post-accept.pdf"&gt;PDF available here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An efficient algorithm for solving multiple linear programs on the GPU.&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Batched linear programing in 2D on the GPU</title><link href="https://coolmule0.github.io/Batch%20Linear%20Programming%20Code.html" rel="alternate"></link><published>2019-04-01T00:00:00+00:00</published><updated>2019-04-01T00:00:00+00:00</updated><author><name>John Charlton</name></author><id>tag:coolmule0.github.io,2019-04-01:/Batch Linear Programming Code.html</id><content type="html">&lt;p&gt;An algorithm based of Seidel's randomised incremental linear program, optimised for GPUs in 2D. It is able to efficiently solve large numbers of different linear programs. See the &lt;a href="https://github.com/coolmule0/LP"&gt;GitHub repository&lt;/a&gt; for source code.&lt;/p&gt;</content><category term="Code"></category></entry></feed>